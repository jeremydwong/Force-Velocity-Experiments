% check_force_velocity
% we fix XXXXX and check that the force vel relationship looks like Hill.
% JDW-2021-09-17
clear all;
load params2.mat
par = load_param2(param,1); %for extensor elbow
n=par.n;
p=par.p;
% end elbow flexor parameters



% % % % % % % % % % % % % % FOR V_ce
l_ce_rel =1;
Fce_rel = 0:0.01:1.48;
qs=[n.q0,0.01,0.1,0.4,0.7,1];
% STIMS = 1;
color='bgrkmc';

% clear qs
iter = 0
for q=qs
    iter = iter+1;% just for stupid color
    for i = 1:size(Fce_rel,2)
        
        % % % % % % % % % % % % % % /FOR V_ce
        
        % calculate active state. requires first l_ce_rel, then roe.
        roe=n.c*n.eta*((n.k-1)/(n.k-l_ce_rel))*l_ce_rel;
        % instead of calculating active state as a dynamical equation
        %       q = (n.q0 + (roe*Ca_gamma_rel).^3)/(1+(roe*Ca_gamma_rel).^3);
        % we set it to be steady-state stim.
        
        F_ce_isom_q1n=-p.a*(l_ce_rel.^2) + 2*p.a*l_ce_rel - p.a + 1;
        % ASSUME q has been calculated.
        Fce_isom = p.FMAX*F_ce_isom_q1n;
        Fce_isom_n = Fce_isom/p.FMAX; %isometric normalized to FMAX
        if l_ce_rel > 1
            a_star = n.a_rel*Fce_isom_n;
        else
            a_star = n.a_rel;
        end;
        % % b_star represents some function related to active state.
        if q < n.q_crit
            b_star = n.b_rel*(1-0.9*((q-n.q_crit)./(n.q0 - n.q_crit))).^2;
        else
            b_star = n.b_rel;
        end;
        
        %the following two define the slope of the eccentric contraction.
        % First Fce_isom_1pw at q=qmin and lcerel=1+0.95*width; so this is a very
        % small amount of force that could be generated by this muscle.
        Fce_isom_1pw = -p.a*((1+(0.95*p.width)).^2) + 2*p.a*(1+0.95*p.width) - p.a + 1;
        sloplin=n.vfactmin.*n.b_rel./(n.slopfac.*n.q0.*Fce_isom_1pw.*(1+n.a_rel));
        %important for calculating degenerate cases of velocity.
        dvdf_isom_con=n.b_rel./(q.*(Fce_isom_n+n.a_rel)); % desired eccentric isometric slope
        dvdf_isom_ecc=dvdf_isom_con./n.slopfac;
        
        % CONCENTRIC
        if (Fce_rel(i) / q) <= Fce_isom_n %if Fce_rel/q is smaller than Fce_isom_n, then we are shortening.
            DOLINEAR = 1;
            DOHYPER = 2;
            DOHILL = 3;
            
            FV = DOHILL;
            if FV==DOLINEAR
                alin = 1/13;% jump height goes to 1.32. a big penalty.
                blin = 1;
                vce_rel(i) = (Fce_rel(i)/q - blin) / alin;
%                 vcerel(imus) = (fcerel(imus)/q(imus) - blin) / alin;

            elseif FV==DOHYPER
                a= 0.3708;b=   -2.4083; c=31.6767;d=1.0062;
                xtemp=Fce_rel(i)/q;
                vce_rel(i) = (1/(Fce_rel(i)-d) + c)/b;
                lbnd = -13;ubnd = 0;
%                 vce_rel(i) = vce_rel(i) + (vce_rel(i) < lbnd) * (lbnd - vce_rel(i))+ (vce_rel(i) > ubnd) * (ubnd - vce_rel(i));
            else
                vce_rel(i) = b_star*(Fce_rel(i) - q*Fce_isom_n)./(Fce_rel(i) + q*a_star);
                %vcerel(imus)=-vfact(imus)* (brel(imus)*(flenrel(imus)+adarel(imus))/(fcerel(imus)/q(imus)+adarel(imus))-brel(imus));

                if (dvdf_isom_con  > sloplin)
                    vce_rel(i) = sloplin.*(Fce_rel(i)-q.*Fce_isom_n);
                    disp('hi concentric degenerate case');
                end;
            end;
            % //end CONCENTRIC
            % ECCENTRIC
        else
            % (fcerel-fasymp*fisom*q-vcerel/sloplin)*(vcerel+p1)=p2
            k1=q.*Fce_isom_n.*(1-n.fasymp); % fasymp>1!!
            k2=n.slopfac.*q.*(Fce_isom_n+n.a_rel)./n.b_rel;
            p1=k1.*sloplin./(1-k2.*sloplin); % "can this ever go wrong?" KvS
            p2=k1.*p1;
            r1=sloplin.*(Fce_rel(i)-n.fasymp.*Fce_isom_n.*q); %"can this ever go wrong?" KvS
            vce_rel(i)=(r1-p1+sqrt((p1-r1).^2-4*(p2.*sloplin-r1.*p1)))/2;
            if (dvdf_isom_ecc > (sloplin./n.slopfac))
                disp('hi eccentric degenerate case');
                vce_rel(i)=(sloplin./n.slopfac).*(Fce_rel(i)-q.*Fce_isom_n);
            end;
        end;
        % //end ECCENTRIC
        
        sprintf('end loop');
    end;
    figure(1);hold on;
    vce_rel'
    disp(q);
    plot(vce_rel,Fce_rel,color(iter));
    figure(2);hold on;
    plot(vce_rel,Fce_rel.*-vce_rel);
    
end;
figure(1);
xlabel('relative velocity')
ylabel('relative muscle force')
axis([-15,30,0,1.5]);
figure(2);
xlabel('relative velocity')
ylabel('relative muscle power')
